<div id="comments-list">
    {{#commentDtos}}
        <div class="card m-2" id="comments-{{id}}">
            <div class="card-header">
                {{nickname}}
                <button type="button"
                        class="btn btn-sm btn-outline-primary"
                        data-bs-toggle="modal"
                        data-bs-target="#comment-edit-modal"
                        data-bs-id="{{id}}"
                        data-bs-nickname="{{nickname}}"
                        data-bs-body="{{body}}"
                        data-bs-todo-id="{{todoId}}">edit
                </button>
                <!-- 댓글 삭제 버튼-->
                <button class="btn btn-sm btn-outline-danger comment-delete-btn"
                        data-comment-id="{{id}}">delete</button>
            </div>
            <div calss="card-body">
                {{body}}
            </div>

        </div>
    {{/commentDtos}}
</div>

<!-- Button trigger modal -->

<!-- Modal -->
<div class="modal fade" id="comment-edit-modal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Edit Comment</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form>
                    <!-- nickname -->
                    <div class="mb-3">
                        <label class="form-label">Nickname</label>
                        <input class="form-control form-control-sm" id="edit-comment-nickname">
                    </div>
                    <!-- comments -->
                    <div class="mb-3 ">
                        <label class="form-label">Comments</label>
                        <textarea class="form-control form-control-sm" row="3" id="edit-comment-body"></textarea>
                    </div>
                    <!-- hidden input -->
                    <input type="hidden" id="edit-comment-id">
                    <input type="hidden" id="edit-comment-todo-id">
                    <button type="submit" class="btn btn-primary" id="comment-update-btn">Update</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </form>
            </div>
            <div class="modal-footer">
            </div>
        </div>
    </div>
</div>

<!-- 모달 이벤트 처리 -->
<script>
    {
    //모달 요소 선택
    const commentEditModal = document.querySelector("#comment-edit-modal");

    //모달 이벤트 감지
    commentEditModal.addEventListener("show.bs.modal", function(event) {
        //trigger버튼 선택
        const triggerBtn = event.relatedTarget;

        //데이터 가져오기
        const id = triggerBtn.getAttribute("data-bs-id");
        const nickname = triggerBtn.getAttribute("data-bs-nickname");
        const body = triggerBtn.getAttribute("data-bs-body");
        const todoId = triggerBtn.getAttribute("data-bs-todo-id");

        //데이터 반영
        document.querySelector("#edit-comment-nickname").value = nickname;
        document.querySelector("#edit-comment-body").value = body;
        document.querySelector("#edit-comment-id").value = id;
        document.querySelector("#edit-comment-todo-id").value = todoId;

    });

    {
    //수정 완료 버튼
    const commentUpdateBtn = document.querySelector("#comment-update-btn");

    //클릭 이벤트 감지 및 처리
    commentUpdateBtn.addEventListener("click", function() {
        // 수정 댓글 객체 생성
        const comment = {
            id: document.querySelector("#edit-comment-id").value,
            nickname: document.querySelector("#edit-comment-nickname").value,
            body: document.querySelector("#edit-comment-body").value,
            todo_id: document.querySelector("#edit-comment-todo-id").value
        };

        console.log(comment);

        //수정 rest api 호출 - fetch()
        const url = "/api/todos/" + comment.todo_id + "/comments";
        fetch(url, {
            method: "PATCH",
            body: JSON.stringify(comment),
            headers: {
                "Content-Type": "application/json"
            }
        }).then(response => {
        // http 응답 코드에 따른 메시지 출력
        const msg = (response.ok) ? "comment updated" : "update fail";
        alert(msg);
        //현재 페이지 새로고침
        window.location.reload();
        });
    });
    }
    }
</script>

<!-- 댓글 삭제 -->
<script>
    {
       //삭제 버튼 선택
       const commentDeleteBtns = document.querySelectorAll(".comment-delete-btn");

        //삭제 버튼 이벤트를 처리
        commentDeleteBtns.forEach(btn => {
            //각 버튼의 이벤트 처리 등록
            btn.addEventListener("click", (event) => {
                //이벤트 발생 요소 선택
                const commentDeleteBtn = event.srcElement;

                //삭제 댓글 id 가져오기
                const commentId= commentDeleteBtn.getAttribute("data-comment-id");
                console.log(`delete button clicked on ${commentId}`); // "delete button clicked on " + commentId

                //삭제 API호출 및 처리
                const url = `/api/comments/${commentId}`;
                fetch(url, {
                    method: "DELETE",
                }).then(response => {
                    // 댓글 삭제 실패 처리
                    if (!response.ok){
                        alert("Deletion failed");
                        return;
                    }

                    //삭제 성공시 댓글 화면에서 지움
                    const target = document.querySelector(`#comments-${commentId}`);
                    target.remove();
                });
            });
        });
    }
</script>

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet">
<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"></script>
